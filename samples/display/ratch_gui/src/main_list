/*
 * Copyright (c) 2018 Jan Van Winkel <jan.van_winkel@dxplore.eu>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

#include <device.h>
#include <drivers/gpio.h>
#include <drivers/display.h>
#include <lvgl.h>
#include <stdio.h>
#include <string.h>
#include <zephyr.h>

#define LOG_LEVEL CONFIG_LOG_DEFAULT_LEVEL
#include <logging/log.h>
LOG_MODULE_REGISTER(app);

lv_obj_t *btn1;
static lv_style_t menu_btn_style;


#define BTN0_NODE	DT_ALIAS(sw0)

#if DT_NODE_HAS_STATUS(BTN0_NODE, okay)
	#define BTN0_GPIO_LABEL		DT_GPIO_LABEL(BTN0_NODE, gpios)
	#define BTN0_GPIO_PIN		DT_GPIO_PIN(BTN0_NODE, gpios)
	#define BTN0_GPIO_FLAGS		(GPIO_INPUT | DT_GPIO_FLAGS(BTN0_NODE, gpios))
#else
	#error "Unsupported board: sw0 devicetree alias is not defined"
#endif

struct device *button;
static struct gpio_callback button_cb_data;

void button_pressed(struct device *dev, struct gpio_callback *cb,
					uint32_t pins)
{
	if (pins & BIT(BTN0_GPIO_PIN)) {
		if (gpio_pin_get(button, BTN0_GPIO_PIN)) {
			lv_btn_set_state(btn1, LV_BTN_STATE_PRESSED);
			lv_event_send(btn1, LV_BTN_STATE_PRESSED, NULL);
		} else {
			lv_btn_set_state(btn1, LV_BTN_STATE_RELEASED);
			lv_event_send(btn1, LV_BTN_STATE_RELEASED, NULL);
		}
	}
}

int config_btns()
{
	int ret;

	button = device_get_binding(BTN0_GPIO_LABEL);
	if (button == NULL) {
		printk("Error: didn't find %s device\n", BTN0_GPIO_LABEL);
		return -EIO;
	}

	ret = gpio_pin_configure(button, BTN0_GPIO_PIN, BTN0_GPIO_FLAGS | GPIO_INT_DEBOUNCE);
	if (ret != 0) {
		printk("Error %d: failed to configure %s pin %d\n",
			   ret, BTN0_GPIO_LABEL, BTN0_GPIO_PIN);
		return ret;
	}

	ret = gpio_pin_interrupt_configure(button,
									   BTN0_GPIO_PIN,
									   GPIO_INT_EDGE_BOTH);
	if (ret != 0) {
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
			   ret, BTN0_GPIO_LABEL, BTN0_GPIO_PIN);
		return ret;
	}

	gpio_init_callback(&button_cb_data, button_pressed, BIT(BTN0_GPIO_PIN));
	gpio_add_callback(button, &button_cb_data);
	printk("Set up button at %s pin %d\n", BTN0_GPIO_LABEL, BTN0_GPIO_PIN);
	return 0;
}


static void menu_btn_handler(lv_obj_t * obj, lv_event_t event)
{
	if (event == LV_BTN_STATE_PRESSED || event == LV_EVENT_CLICKED) {
		printk("Clicked\n");
	} else if (event == LV_BTN_STATE_RELEASED) {
		printk("Released\n");
	} else if (event == LV_EVENT_VALUE_CHANGED) {
		printk("Toggled\n");
	} else {
		printk("Something happend %d\n", event);
	}
}

void show_menu(void)
{
	static lv_style_t menu_base_style;
	lv_obj_t *menu_base_obj;

	lv_style_init(&menu_base_style);
	lv_style_set_radius(&menu_base_style, LV_STATE_DEFAULT, 5);
	lv_style_set_transform_width(&menu_base_style, LV_STATE_DEFAULT, 176);
	lv_style_set_transform_height(&menu_base_style, LV_STATE_DEFAULT, 176);
	lv_style_set_bg_opa(&menu_base_style, LV_STATE_DEFAULT, LV_OPA_COVER);
	lv_style_set_bg_color(&menu_base_style, LV_STATE_DEFAULT, LV_COLOR_GREEN);

	menu_base_obj = lv_obj_create(lv_scr_act(), NULL);
	lv_obj_set_size(menu_base_obj, 176, 176);
	lv_obj_add_style(menu_base_obj, LV_OBJ_PART_MAIN, &menu_base_style);
	lv_obj_align(menu_base_obj, NULL, LV_ALIGN_CENTER, 0, 0);

	lv_style_init(&menu_btn_style);
	lv_style_set_radius(&menu_btn_style, LV_STATE_DEFAULT, 10);
	lv_style_set_bg_opa(&menu_btn_style, LV_STATE_DEFAULT, LV_OPA_COVER);
	lv_style_set_bg_color(&menu_btn_style, LV_STATE_DEFAULT, LV_COLOR_WHITE);
	lv_style_set_text_font(&menu_btn_style, LV_STATE_DEFAULT, &lv_font_montserrat_20);

	lv_style_set_bg_color(&menu_btn_style, LV_STATE_PRESSED, LV_COLOR_BLACK);

	//lv_obj_t *label;

	//btn1 = lv_btn_create(menu_base_obj, NULL);
	//lv_obj_set_event_cb(btn1, menu_btn_handler);
	//lv_obj_set_width(btn1, 95);
	//lv_obj_set_height(btn1, 25);
	//lv_obj_align(btn1, NULL, LV_ALIGN_CENTER, 0, 0);
	//lv_obj_add_style(btn1, LV_OBJ_PART_MAIN, &menu_btn_style);
	//lv_obj_set_style_local_text_color(btn1, LV_BTN_PART_MAIN, LV_STATE_PRESSED, LV_COLOR_WHITE);

	/*Create a list*/
	lv_obj_t *menu_list_obj = lv_list_create(menu_base_obj, NULL);
	lv_obj_set_size(menu_list_obj, 170, 170);
	lv_obj_align(menu_list_obj, NULL, LV_ALIGN_CENTER, 0, 0);

	/*Add buttons to the list*/
	lv_obj_t *menu_list_btn;

	menu_list_btn = lv_list_add_btn(menu_list_obj, LV_SYMBOL_FILE, "App1");
	lv_obj_add_style(menu_list_btn, LV_OBJ_PART_MAIN, &menu_btn_style);
	lv_obj_set_event_cb(menu_list_btn, menu_btn_handler);

	menu_list_btn = lv_list_add_btn(menu_list_obj, LV_SYMBOL_DIRECTORY, "App2");
	lv_obj_add_style(menu_list_btn, LV_OBJ_PART_MAIN, &menu_btn_style);
	lv_obj_set_event_cb(menu_list_btn, menu_btn_handler);
	
	lv_list_focus_btn(menu_list_obj, menu_list_btn);

	/*
	    list_btn = lv_list_add_btn(list1, LV_SYMBOL_CLOSE, "Delete");
	    lv_obj_set_event_cb(list_btn, event_handler);

	    list_btn = lv_list_add_btn(list1, LV_SYMBOL_EDIT, "Edit");
	    lv_obj_set_event_cb(list_btn, event_handler);

	    list_btn = lv_list_add_btn(list1, LV_SYMBOL_SAVE, "Save");
	    lv_obj_set_event_cb(list_btn, event_handler);

	    list_btn = lv_list_add_btn(list1, LV_SYMBOL_BELL, "Notify");
	    lv_obj_set_event_cb(list_btn, event_handler);

	    list_btn = lv_list_add_btn(list1, LV_SYMBOL_BATTERY_FULL, "Battery");
	    lv_obj_set_event_cb(list_btn, event_handler);
	*/
}


void main(void)
{
	uint32_t count = 0;
	struct device *display_dev;
	display_dev = device_get_binding(CONFIG_LVGL_DISPLAY_DEV_NAME);

	if (display_dev == NULL) {
		LOG_ERR("device not found.  Aborting test.");
		return;
	}

	config_btns();
	show_menu();

	lv_task_handler();
	display_blanking_off(display_dev);

	while (1) {
		lv_task_handler();

		k_sleep(K_MSEC(10));
		++count;
	}
}
